// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.0
// 	protoc        v3.11.4
// source: services.proto

package apiv1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IdentifierMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System    string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	TargetUri string `protobuf:"bytes,3,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
}

func (x *IdentifierMapRequest) Reset() {
	*x = IdentifierMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierMapRequest) ProtoMessage() {}

func (x *IdentifierMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierMapRequest.ProtoReflect.Descriptor instead.
func (*IdentifierMapRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

func (x *IdentifierMapRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *IdentifierMapRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IdentifierMapRequest) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

// PublishDocumentRequest publishes the document(s)
// The recipient identifier list contains identifiers of those who need to be notified about the document.
// The resolution of *how* that resolution occurs is at the discretion of the transport, so may conceivably
// be postal mail, email or some other notification / workflow system.
type PublishDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *PublishDocumentRequest) Reset() {
	*x = PublishDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDocumentRequest) ProtoMessage() {}

func (x *PublishDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDocumentRequest.ProtoReflect.Descriptor instead.
func (*PublishDocumentRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{1}
}

func (x *PublishDocumentRequest) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// PublishDocumentResponse is returned on successful publication
type PublishDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublishDocumentResponse) Reset() {
	*x = PublishDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDocumentResponse) ProtoMessage() {}

func (x *PublishDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDocumentResponse.ProtoReflect.Descriptor instead.
func (*PublishDocumentResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{2}
}

func (x *PublishDocumentResponse) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

type NotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient *Identifier `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"` // recipient of this notification
	Patient   *Patient    `protobuf:"bytes,2,opt,name=patient,proto3" json:"patient,omitempty"`     // patient to which this notification refers
}

func (x *NotificationRequest) Reset() {
	*x = NotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequest) ProtoMessage() {}

func (x *NotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequest.ProtoReflect.Descriptor instead.
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{3}
}

func (x *NotificationRequest) GetRecipient() *Identifier {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *NotificationRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

// incomplete
type NotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // unique identifier for this notification
}

func (x *NotificationResponse) Reset() {
	*x = NotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationResponse) ProtoMessage() {}

func (x *NotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationResponse.ProtoReflect.Descriptor instead.
func (*NotificationResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{4}
}

func (x *NotificationResponse) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

type PractitionerSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System    string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *PractitionerSearchRequest) Reset() {
	*x = PractitionerSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PractitionerSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PractitionerSearchRequest) ProtoMessage() {}

func (x *PractitionerSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PractitionerSearchRequest.ProtoReflect.Descriptor instead.
func (*PractitionerSearchRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{5}
}

func (x *PractitionerSearchRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *PractitionerSearchRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PractitionerSearchRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PractitionerSearchRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x61, 0x70, 0x69, 0x76, 0x31, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a,
	0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x72, 0x69, 0x22, 0x45, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x17, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x14, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x50,
	0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x32, 0xbb, 0x01, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2f, 0x7b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x12, 0x52, 0x0a, 0x0d, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x0f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x30, 0x01, 0x32, 0x96,
	0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x3a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x32, 0x6f, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x01, 0x2a, 0x32, 0x87, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x6e, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x30, 0x01, 0x42, 0x3d, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x64, 0x72, 0x69, 0x78,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x65, 0x72, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x5a, 0x21,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x6c,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x65, 0x72, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_services_proto_goTypes = []interface{}{
	(*IdentifierMapRequest)(nil),      // 0: apiv1.IdentifierMapRequest
	(*PublishDocumentRequest)(nil),    // 1: apiv1.PublishDocumentRequest
	(*PublishDocumentResponse)(nil),   // 2: apiv1.PublishDocumentResponse
	(*NotificationRequest)(nil),       // 3: apiv1.NotificationRequest
	(*NotificationResponse)(nil),      // 4: apiv1.NotificationResponse
	(*PractitionerSearchRequest)(nil), // 5: apiv1.PractitionerSearchRequest
	(*Document)(nil),                  // 6: apiv1.Document
	(*Identifier)(nil),                // 7: apiv1.Identifier
	(*Patient)(nil),                   // 8: apiv1.Patient
	(*LoginRequest)(nil),              // 9: apiv1.LoginRequest
	(*TokenRefreshRequest)(nil),       // 10: apiv1.TokenRefreshRequest
	(*LoginResponse)(nil),             // 11: apiv1.LoginResponse
	(*any.Any)(nil),                   // 12: google.protobuf.Any
	(*Practitioner)(nil),              // 13: apiv1.Practitioner
}
var file_services_proto_depIdxs = []int32{
	6,  // 0: apiv1.PublishDocumentRequest.document:type_name -> apiv1.Document
	7,  // 1: apiv1.PublishDocumentResponse.id:type_name -> apiv1.Identifier
	7,  // 2: apiv1.NotificationRequest.recipient:type_name -> apiv1.Identifier
	8,  // 3: apiv1.NotificationRequest.patient:type_name -> apiv1.Patient
	7,  // 4: apiv1.NotificationResponse.id:type_name -> apiv1.Identifier
	9,  // 5: apiv1.Authenticator.Login:input_type -> apiv1.LoginRequest
	10, // 6: apiv1.Authenticator.Refresh:input_type -> apiv1.TokenRefreshRequest
	7,  // 7: apiv1.Identifiers.GetIdentifier:input_type -> apiv1.Identifier
	0,  // 8: apiv1.Identifiers.MapIdentifier:input_type -> apiv1.IdentifierMapRequest
	1,  // 9: apiv1.DocumentService.PublishDocument:input_type -> apiv1.PublishDocumentRequest
	3,  // 10: apiv1.NotificationService.Notify:input_type -> apiv1.NotificationRequest
	5,  // 11: apiv1.PractitionerDirectory.SearchPractitioner:input_type -> apiv1.PractitionerSearchRequest
	11, // 12: apiv1.Authenticator.Login:output_type -> apiv1.LoginResponse
	11, // 13: apiv1.Authenticator.Refresh:output_type -> apiv1.LoginResponse
	12, // 14: apiv1.Identifiers.GetIdentifier:output_type -> google.protobuf.Any
	7,  // 15: apiv1.Identifiers.MapIdentifier:output_type -> apiv1.Identifier
	2,  // 16: apiv1.DocumentService.PublishDocument:output_type -> apiv1.PublishDocumentResponse
	4,  // 17: apiv1.NotificationService.Notify:output_type -> apiv1.NotificationResponse
	13, // 18: apiv1.PractitionerDirectory.SearchPractitioner:output_type -> apiv1.Practitioner
	12, // [12:19] is the sub-list for method output_type
	5,  // [5:12] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	file_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PractitionerSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthenticatorClient is the client API for Authenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticatorClient interface {
	// Login authenticates using the credentials specified and returns an authentication token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Refresh refreshes a currently valid token
	Refresh(ctx context.Context, in *TokenRefreshRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authenticatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorClient(cc grpc.ClientConnInterface) AuthenticatorClient {
	return &authenticatorClient{cc}
}

func (c *authenticatorClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/apiv1.Authenticator/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorClient) Refresh(ctx context.Context, in *TokenRefreshRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/apiv1.Authenticator/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorServer is the server API for Authenticator service.
type AuthenticatorServer interface {
	// Login authenticates using the credentials specified and returns an authentication token
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Refresh refreshes a currently valid token
	Refresh(context.Context, *TokenRefreshRequest) (*LoginResponse, error)
}

// UnimplementedAuthenticatorServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorServer struct {
}

func (*UnimplementedAuthenticatorServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthenticatorServer) Refresh(context.Context, *TokenRefreshRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

func RegisterAuthenticatorServer(s *grpc.Server, srv AuthenticatorServer) {
	s.RegisterService(&_Authenticator_serviceDesc, srv)
}

func _Authenticator_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.Authenticator/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticator_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.Authenticator/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).Refresh(ctx, req.(*TokenRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authenticator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.Authenticator",
	HandlerType: (*AuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Authenticator_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Authenticator_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// IdentifiersClient is the client API for Identifiers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentifiersClient interface {
	GetIdentifier(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*any.Any, error)
	MapIdentifier(ctx context.Context, in *IdentifierMapRequest, opts ...grpc.CallOption) (Identifiers_MapIdentifierClient, error)
}

type identifiersClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentifiersClient(cc grpc.ClientConnInterface) IdentifiersClient {
	return &identifiersClient{cc}
}

func (c *identifiersClient) GetIdentifier(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/apiv1.Identifiers/GetIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifiersClient) MapIdentifier(ctx context.Context, in *IdentifierMapRequest, opts ...grpc.CallOption) (Identifiers_MapIdentifierClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Identifiers_serviceDesc.Streams[0], "/apiv1.Identifiers/MapIdentifier", opts...)
	if err != nil {
		return nil, err
	}
	x := &identifiersMapIdentifierClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Identifiers_MapIdentifierClient interface {
	Recv() (*Identifier, error)
	grpc.ClientStream
}

type identifiersMapIdentifierClient struct {
	grpc.ClientStream
}

func (x *identifiersMapIdentifierClient) Recv() (*Identifier, error) {
	m := new(Identifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IdentifiersServer is the server API for Identifiers service.
type IdentifiersServer interface {
	GetIdentifier(context.Context, *Identifier) (*any.Any, error)
	MapIdentifier(*IdentifierMapRequest, Identifiers_MapIdentifierServer) error
}

// UnimplementedIdentifiersServer can be embedded to have forward compatible implementations.
type UnimplementedIdentifiersServer struct {
}

func (*UnimplementedIdentifiersServer) GetIdentifier(context.Context, *Identifier) (*any.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentifier not implemented")
}
func (*UnimplementedIdentifiersServer) MapIdentifier(*IdentifierMapRequest, Identifiers_MapIdentifierServer) error {
	return status.Errorf(codes.Unimplemented, "method MapIdentifier not implemented")
}

func RegisterIdentifiersServer(s *grpc.Server, srv IdentifiersServer) {
	s.RegisterService(&_Identifiers_serviceDesc, srv)
}

func _Identifiers_GetIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifiersServer).GetIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.Identifiers/GetIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifiersServer).GetIdentifier(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identifiers_MapIdentifier_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdentifierMapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdentifiersServer).MapIdentifier(m, &identifiersMapIdentifierServer{stream})
}

type Identifiers_MapIdentifierServer interface {
	Send(*Identifier) error
	grpc.ServerStream
}

type identifiersMapIdentifierServer struct {
	grpc.ServerStream
}

func (x *identifiersMapIdentifierServer) Send(m *Identifier) error {
	return x.ServerStream.SendMsg(m)
}

var _Identifiers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.Identifiers",
	HandlerType: (*IdentifiersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentifier",
			Handler:    _Identifiers_GetIdentifier_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MapIdentifier",
			Handler:       _Identifiers_MapIdentifier_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocumentServiceClient interface {
	PublishDocument(ctx context.Context, in *PublishDocumentRequest, opts ...grpc.CallOption) (*PublishDocumentResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) PublishDocument(ctx context.Context, in *PublishDocumentRequest, opts ...grpc.CallOption) (*PublishDocumentResponse, error) {
	out := new(PublishDocumentResponse)
	err := c.cc.Invoke(ctx, "/apiv1.DocumentService/PublishDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
type DocumentServiceServer interface {
	PublishDocument(context.Context, *PublishDocumentRequest) (*PublishDocumentResponse, error)
}

// UnimplementedDocumentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (*UnimplementedDocumentServiceServer) PublishDocument(context.Context, *PublishDocumentRequest) (*PublishDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDocument not implemented")
}

func RegisterDocumentServiceServer(s *grpc.Server, srv DocumentServiceServer) {
	s.RegisterService(&_DocumentService_serviceDesc, srv)
}

func _DocumentService_PublishDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).PublishDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.DocumentService/PublishDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).PublishDocument(ctx, req.(*PublishDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocumentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishDocument",
			Handler:    _DocumentService_PublishDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServiceClient interface {
	Notify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Notify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/apiv1.NotificationService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	Notify(context.Context, *NotificationRequest) (*NotificationResponse, error)
}

// UnimplementedNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (*UnimplementedNotificationServiceServer) Notify(context.Context, *NotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.NotificationService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Notify(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NotificationService_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// PractitionerDirectoryClient is the client API for PractitionerDirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PractitionerDirectoryClient interface {
	SearchPractitioner(ctx context.Context, in *PractitionerSearchRequest, opts ...grpc.CallOption) (PractitionerDirectory_SearchPractitionerClient, error)
}

type practitionerDirectoryClient struct {
	cc grpc.ClientConnInterface
}

func NewPractitionerDirectoryClient(cc grpc.ClientConnInterface) PractitionerDirectoryClient {
	return &practitionerDirectoryClient{cc}
}

func (c *practitionerDirectoryClient) SearchPractitioner(ctx context.Context, in *PractitionerSearchRequest, opts ...grpc.CallOption) (PractitionerDirectory_SearchPractitionerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PractitionerDirectory_serviceDesc.Streams[0], "/apiv1.PractitionerDirectory/SearchPractitioner", opts...)
	if err != nil {
		return nil, err
	}
	x := &practitionerDirectorySearchPractitionerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PractitionerDirectory_SearchPractitionerClient interface {
	Recv() (*Practitioner, error)
	grpc.ClientStream
}

type practitionerDirectorySearchPractitionerClient struct {
	grpc.ClientStream
}

func (x *practitionerDirectorySearchPractitionerClient) Recv() (*Practitioner, error) {
	m := new(Practitioner)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PractitionerDirectoryServer is the server API for PractitionerDirectory service.
type PractitionerDirectoryServer interface {
	SearchPractitioner(*PractitionerSearchRequest, PractitionerDirectory_SearchPractitionerServer) error
}

// UnimplementedPractitionerDirectoryServer can be embedded to have forward compatible implementations.
type UnimplementedPractitionerDirectoryServer struct {
}

func (*UnimplementedPractitionerDirectoryServer) SearchPractitioner(*PractitionerSearchRequest, PractitionerDirectory_SearchPractitionerServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPractitioner not implemented")
}

func RegisterPractitionerDirectoryServer(s *grpc.Server, srv PractitionerDirectoryServer) {
	s.RegisterService(&_PractitionerDirectory_serviceDesc, srv)
}

func _PractitionerDirectory_SearchPractitioner_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PractitionerSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PractitionerDirectoryServer).SearchPractitioner(m, &practitionerDirectorySearchPractitionerServer{stream})
}

type PractitionerDirectory_SearchPractitionerServer interface {
	Send(*Practitioner) error
	grpc.ServerStream
}

type practitionerDirectorySearchPractitionerServer struct {
	grpc.ServerStream
}

func (x *practitionerDirectorySearchPractitionerServer) Send(m *Practitioner) error {
	return x.ServerStream.SendMsg(m)
}

var _PractitionerDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.PractitionerDirectory",
	HandlerType: (*PractitionerDirectoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchPractitioner",
			Handler:       _PractitionerDirectory_SearchPractitioner_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}
