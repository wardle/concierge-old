// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package apiv1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalesEMPIClient is the client API for WalesEMPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalesEMPIClient interface {
	GetRawEMPIRequest(ctx context.Context, in *RawCymruEmpiRequest, opts ...grpc.CallOption) (*Patient, error)
}

type walesEMPIClient struct {
	cc *grpc.ClientConn
}

func NewWalesEMPIClient(cc *grpc.ClientConn) WalesEMPIClient {
	return &walesEMPIClient{cc}
}

func (c *walesEMPIClient) GetRawEMPIRequest(ctx context.Context, in *RawCymruEmpiRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/apiv1.WalesEMPI/GetRawEMPIRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalesEMPIServer is the server API for WalesEMPI service.
type WalesEMPIServer interface {
	GetRawEMPIRequest(context.Context, *RawCymruEmpiRequest) (*Patient, error)
}

func RegisterWalesEMPIServer(s *grpc.Server, srv WalesEMPIServer) {
	s.RegisterService(&_WalesEMPI_serviceDesc, srv)
}

func _WalesEMPI_GetRawEMPIRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawCymruEmpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalesEMPIServer).GetRawEMPIRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv1.WalesEMPI/GetRawEMPIRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalesEMPIServer).GetRawEMPIRequest(ctx, req.(*RawCymruEmpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalesEMPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv1.WalesEMPI",
	HandlerType: (*WalesEMPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRawEMPIRequest",
			Handler:    _WalesEMPI_GetRawEMPIRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_3c1a0dc79a38f928) }

var fileDescriptor_server_3c1a0dc79a38f928 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8f, 0x41, 0x4a, 0xc4, 0x40,
	0x10, 0x45, 0x51, 0x70, 0xc0, 0x46, 0x04, 0xb3, 0x92, 0xe0, 0xca, 0x8d, 0x88, 0xd8, 0xcd, 0xe8,
	0x0d, 0x46, 0x06, 0x71, 0x21, 0x84, 0x6c, 0x04, 0x77, 0x65, 0xa6, 0x8c, 0x05, 0x49, 0x57, 0x5b,
	0x5d, 0x49, 0x1c, 0x86, 0x6c, 0xbc, 0x82, 0x47, 0xf3, 0x0a, 0x1e, 0x44, 0x7a, 0x92, 0x65, 0xd5,
	0x83, 0xc7, 0xfb, 0xe6, 0x24, 0xa2, 0xf4, 0x28, 0x36, 0x08, 0x2b, 0x67, 0x47, 0x10, 0xa8, 0x5f,
	0xe6, 0x06, 0xdb, 0x40, 0xd3, 0x2b, 0xbf, 0xa8, 0x99, 0xeb, 0x06, 0x1d, 0x04, 0x72, 0xe0, 0x3d,
	0x2b, 0x28, 0xb1, 0x8f, 0x13, 0xbd, 0x1b, 0xcd, 0xf1, 0x0b, 0x34, 0x18, 0xd7, 0xcf, 0xc5, 0x53,
	0x16, 0xcc, 0xd9, 0x23, 0x6a, 0x09, 0x43, 0xba, 0x4a, 0xfc, 0xec, 0x30, 0x6a, 0x96, 0xdb, 0xbd,
	0xd3, 0x96, 0x30, 0x3c, 0x6c, 0x5b, 0xe9, 0xd6, 0x6d, 0xa0, 0x99, 0xe5, 0xa7, 0x33, 0x2b, 0x40,
	0x09, 0xbd, 0x5e, 0xba, 0xef, 0xdf, 0xbf, 0x9f, 0xc3, 0xeb, 0xec, 0xca, 0xf5, 0x4b, 0x37, 0x24,
	0xef, 0x6d, 0x2a, 0x71, 0x3b, 0xe8, 0xf4, 0x83, 0x85, 0x74, 0x3b, 0xba, 0x1d, 0x6d, 0xd0, 0x2b,
	0xbd, 0x13, 0xca, 0xb8, 0xba, 0x31, 0xe7, 0x15, 0xb7, 0x16, 0x9b, 0x8d, 0xd0, 0x97, 0xad, 0xd8,
	0x57, 0x84, 0x52, 0x63, 0xd2, 0xae, 0x16, 0x45, 0x2a, 0x8c, 0xc5, 0xc1, 0xeb, 0xb4, 0xea, 0x6d,
	0xb1, 0x4f, 0xbe, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xff, 0xa8, 0x0f, 0xf3, 0x00, 0x00,
	0x00,
}
